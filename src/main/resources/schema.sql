

CREATE TABLE IF NOT EXISTS friend_status (
    status_id INTEGER NOT NULL PRIMARY KEY,
    status VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER NOT NULL PRIMARY KEY,
    genre VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS rating_mpa (
    rating_mpa_id INTEGER NOT NULL PRIMARY KEY,
    rating_mpa VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR UNIQUE NOT NULL,
    login VARCHAR UNIQUE NOT NULL,
    username VARCHAR NOT NULL,
    birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR NOT NULL,
    description TEXT NOT NULL CHECK (LENGTH(description) <= 200),
    release_date DATE NOT NULL,
    duration INTEGER CHECK (duration >= 0 AND NOT NULL),
    rating_mpa_id INTEGER REFERENCES rating_mpa (rating_mpa_id) ON DELETE RESTRICT,
    UNIQUE (film_name, release_date)
);

-- =========================================================================

CREATE TABLE IF NOT EXISTS friends (
    user_id_1 INTEGER NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
    user_id_2 INTEGER NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
    status_id INTEGER NOT NULL REFERENCES friend_status (status_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER NOT NULL REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genre (genre_id) ON DELETE RESTRICT
);

-- =========================================================================

CREATE TABLE IF NOT EXISTS liked_films (
    user_id INTEGER NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
    film_id INTEGER NOT NULL REFERENCES films (film_id) ON DELETE CASCADE
);